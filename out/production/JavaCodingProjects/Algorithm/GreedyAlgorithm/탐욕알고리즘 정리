알고리즘
1. 탐욕 알고리즘(Greedy Algorithm)
최적의 해에 가까운 값을 구하기 위해 사용됨
여러 경우 중 하나를 결정해야할 때마다, 매순간 ★최적★이라고 생각되는 경우를 선택하는 방식으로 진행해서
최종적인 값을 구하는 방식

※ 문제1 : 동전 문제
지불해야 하는 값이 4720원 일 때 1원, 50원, 100원, 500원 동전으로 동전의 수가 가장 적게 지불하시오.
    가장 큰 동전부터 최대한 지불해야 하는 값을 채우는 방식으로 구현 가능
    탐욕 알고리즘으로 매순간 최적이라고 생각되는 경우를 선택하면 됨

※ 문제2 : 부분 배낭 문제(Fractional Knapsack Problem)
무게 제한이 k인 배낭에 최대 가치를 가지도록 물건을 넣는 문제
    각 물건은 무게(w)와 가치(v)로 표현될 수 있음
    물건은 쪼갤 수 있으므로 물건의 일부분이 배낭에 넣어질 수 있음. 그래서 Fractional Knapsack Problem
    으로 부름
    Fractional Knapsack Problem의 반대로 물건을 쪼개서 넣을 수 없는 배낭 문제도 존재
    (0/1 Knapsack Problem)

Comparable과 Comparator 인터페이스
Comparable 인터페이스는 compareTo() 메소드를 override해서 구현
    일반적으로는 [정렬할 객체]에 implements로 Comparable 인터페이스를 추가하여 구현
Comparator 인터페이스는 compare() 메소드를 override해서 구현
    일반적으로는 [별도 클래스]를 정의해서 구현하며,
    따라서, 동일 객체에 다양한 정렬 기준을 가진 클래스를 작성 가능
