자료구조
1. 해쉬 테이블
키에 데이터를 매핑할 수 있는 데이터 구조
해쉬 함수를 통해, 배열에 키에 대한 데이터를 저장할 수 있는 주소(인덱스 번호)를 계산
key를 통해 바로 데이터가 저장되어 있는 주소를 알 수 있으므로, 저장 및 탐색 속도가 획기적으로 빨라짐
미리 해쉬 함수가 생성할 수 있는 주소(인덱스 번호)에 대한 공간을 배열로 할당한 후,
키에 따른 데이터 저장 및 탐색 지원

※ 알아둘 용어
해싱 함수 : 임의의 데이터를 고정된 길이의 값으로 리턴해 주는 함수
    해쉬, 해쉬값, 해쉬주소 : 해싱 함수를 통해 리턴된 고정된 길이의 값
해쉬 테이블 : 키 값의 연산에 의해 직접 접근이 가능한 데이터 구조
    슬롯 : 해쉬 테이블에서 한 개의 데이터를 저장할 수 있는 공간

※ 해쉬 테이블의 장단점과 주요 용도
장점
    데이터 저장/읽기 속도가 빠르다.(검색속도가 빠르다)
    해쉬는 키에 대한 데이터가 있는지(중복) 확인이 쉬움
단점
    일반적으로 저장공간이 좀더 많이 필요하다.
    여러 키에 해당하는 주소가 동일할 경우 충돌을 해결하기 위한 별도 자료구조가 필요함
주요 용도
    검색이 많이 필요한 경우
    저장, 삭제, 읽기가 빈번한 경우
    캐쉬 구현시(중복 확인이 쉽기 때문에)

※ 충돌 해결 알고리즘 (좋은 해쉬 함수 사용하기)
Chaining 기법 :
개발 해슁 또는 Open Hashing 기법중 하나
해쉬 테이블 저장공간 외의 공간을 활용하는 기법
충돌이 일어나면, 링크드 리스트라는 자료 구조를 사용해서
링크드 리스트로 데이터를 추가로 뒤에 연결시켜서 저장하는 기법

Linear Probing 기법
폐쇄 해슁 또는 Close Hashing 기법중 하나
해쉬 테이블 저장공간 안에서 충돌 문제를 해결하는 기법
충돌이 일어나면, 해당 hash address의 다음 address부터 맨 처음 나오는
빈공간에 저장하는 기법, 저장 공간 활용도를 높이기 위한 기법법

※ 빈번한 충돌을 개선하는 기법
해쉬 테이블 저장공간을 확대 및 해쉬 함수 재정의